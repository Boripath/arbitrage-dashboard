# snapshot_runner.py

import pandas as pd
from datetime import datetime
from fetch.fetch_deribit import fetch_deribit
from fetch.fetch_binance import fetch_binance
from fetch.fetch_bybit import fetch_bybit
from utils.calculate_apy import calculate_apy
from storage.save_snapshot import save_snapshot
from storage.upload_to_gdrive import upload_to_gdrive

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
ASSETS = ["BTC", "ETH"]
EXCHANGES = {
    "Deribit": fetch_deribit,
    "Binance": fetch_binance,
    "Bybit": fetch_bybit,
}
ENABLED_EXCHANGES = ["Deribit"]  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Deribit ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏£‡∏Å

def main():
    print("üì° Starting snapshot fetch...")
    data_frames = []

    for name in ENABLED_EXCHANGES:
        try:
            fetch_func = EXCHANGES[name]
            df = fetch_func(assets=ASSETS)
            df["Exchange"] = name
            data_frames.append(df)
            print(f"‚úÖ Fetched from {name}: {len(df)} rows")
        except Exception as e:
            print(f"‚ùå Failed to fetch from {name}: {e}")

    if not data_frames:
        print("‚ö†Ô∏è No data fetched. Exiting.")
        return

    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    combined_df = pd.concat(data_frames, ignore_index=True)

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì APY, Z-score, spread_per_day ‡∏Ø‡∏•‡∏Ø
    processed_df = calculate_apy(combined_df)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå snapshot ‚Üí .parquet
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"arbitrage_snapshot_{timestamp}.parquet"
    filepath = save_snapshot(processed_df, filename)

    # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Drive
    upload_to_gdrive(filepath, filename)

    print(f"‚úÖ Snapshot completed and uploaded: {filename}")

if __name__ == "__main__":
    main()

